name: Backend

on:
  push:
  # schedule:
  #   - cron: "0 4 * * *"
  workflow_dispatch:
env:
  PROJECT: seadata

jobs:
  Development-mode:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - uses: rapydo/actions/install@v2
        with:
          project: ${PROJECT}

      - name: Run Pytest
        run: |

          IRODS_PASSWORD=$(grep ALCHEMY_PASSWORD .env | awk -F= {'print $2'})
          IRODS_USER=$(grep IRODS_USER .env | awk -F= {'print $2'})

          # Please note the comma after SEADATA_PRIVILEGED_USERS,
          # it is added to test the initialization func resilience in case of errors
          rapydo --testing -e SEADATA_EDMO_CODE=1234 -e SEADATA_PRIVILEGED_USERS=${IRODS_USER}, -e ACTIVATE_ICAT=1 -e IRODS_PASSWORD=${IRODS_PASSWORD} init --force
          # == ${RESOURCES_LOCALPATH}/${SEADATA_WORKSPACE_INGESTION}
          sudo mkdir -p /nfs/share/batches
          # == ${RESOURCES_LOCALPATH}/${SEADATA_WORKSPACE_ORDERS}
          sudo mkdir -p /nfs/share/orders

          sudo chmod 777 -R /nfs/share

          rapydo pull --quiet
          rapydo build --force
          rapydo add task test_task

          rapydo start
          rapydo shell backend 'restapi wait'

          rapydo shell backend 'restapi tests --wait --destroy'

          LOGURU_LEVEL=WARNING rapydo list services
          # This should fail if at least one container is in Exit status
          [[ ! $(LOGURU_LEVEL=WARNING rapydo list services | grep -E "Exit|Restarting|Created") ]]

      - name: Coverage
        uses: rapydo/actions/coverage@v2
        with:
          repository: projects/${PROJECT}
          project: ${PROJECT}
          step: backend

      - name: Print Logs
        if: failure()
        run: tail -100 data/logs/backend-server.log

      - name: Docker Logs
        if: failure()
        run: |
          rapydo logs

  Production-mode:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - uses: rapydo/actions/install@v2
        with:
          project: ${PROJECT}

      - name: Production mode
        run: |

          IRODS_PASSWORD=$(grep ALCHEMY_PASSWORD .env | awk -F= {'print $2'})
          IRODS_USER=$(grep IRODS_USER .env | awk -F= {'print $2'})

          sudo mkdir -p /nfs/share/batches
          sudo mkdir -p /nfs/share/orders
          sudo chmod 777 -R /nfs/share

          rapydo --testing --prod -e SEADATA_EDMO_CODE=1234 -e ACTIVATE_ICAT=1 -e IRODS_PASSWORD=${IRODS_PASSWORD} init --force
          rapydo pull --quiet
          rapydo build
          rapydo ssl --volatile
          rapydo start
          sleep 45
          rapydo logs
          curl --insecure -X GET --max-time 5 https://localhost/api/status | grep "Server is alive"
          rapydo logs --tail 20 proxy backend

          LOGURU_LEVEL=WARNING rapydo list services
          # This should fail if at least one container is in Exit status
          # Except for frontend that is expected to be exited in prod mode
          [[ ! $(LOGURU_LEVEL=WARNING rapydo list services | grep -v frontend | grep -E "Exit|Restarting|Created") ]]

      - name: Print Logs
        if: failure()
        run: tail -100 data/logs/backend-server.log

      - name: Docker Logs
        if: failure()
        run: |
          rapydo logs
